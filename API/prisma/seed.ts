import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Iniciando seed da base de dados...');

  // Limpar dados existentes (opcional - descomente se quiser resetar)
  // await prisma.friendship.deleteMany();
  // await prisma.friendRequest.deleteMany();
  // await prisma.wishlistItem.deleteMany();
  // await prisma.favorite.deleteMany();
  // await prisma.review.deleteMany();
  // await prisma.listingImage.deleteMany();
  // await prisma.listing.deleteMany();
  // await prisma.book.deleteMany();
  // await prisma.category.deleteMany();
  // await prisma.profile.deleteMany();

  // Criar categorias de livros
  console.log('üìö Criando categorias...');
  const categories = await Promise.all([
    prisma.category.upsert({
      where: { name: 'Fic√ß√£o' },
      update: {},
      create: { name: 'Fic√ß√£o', description: 'Livros de fic√ß√£o e literatura' }
    }),
    prisma.category.upsert({
      where: { name: 'N√£o-Fic√ß√£o' },
      update: {},
      create: { name: 'N√£o-Fic√ß√£o', description: 'Livros informativos e educativos' }
    }),
    prisma.category.upsert({
      where: { name: 'Tecnologia' },
      update: {},
      create: { name: 'Tecnologia', description: 'Livros sobre tecnologia e programa√ß√£o' }
    }),
    prisma.category.upsert({
      where: { name: 'Biografia' },
      update: {},
      create: { name: 'Biografia', description: 'Biografias e mem√≥rias' }
    }),
    prisma.category.upsert({
      where: { name: 'Hist√≥ria' },
      update: {},
      create: { name: 'Hist√≥ria', description: 'Livros de hist√≥ria e geografia' }
    })
  ]);

  console.log(`‚úÖ ${categories.length} categorias criadas`);

  // Criar usu√°rios de teste
  console.log('üë• Criando usu√°rios de teste...');

  // Usu√°rio 1: Jo√£o Silva (Usu√°rio comum)
  const joao = await prisma.profile.upsert({
    where: { email: 'joao.silva@email.com' },
    update: {},
    create: {
      userId: 'auth-user-1', // ID fict√≠cio do Supabase auth
      email: 'joao.silva@email.com',
      name: 'Jo√£o Silva',
      phone: '(11) 99999-1111',
      avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face',
      bio: 'Apaixonado por livros de fic√ß√£o e tecnologia. Sempre em busca de novas hist√≥rias para ler.',
      accountType: 'USER'
    }
  });

  // Usu√°rio 2: Maria Santos (Livraria)
  const maria = await prisma.profile.upsert({
    where: { email: 'maria.santos@livraria.com' },
    update: {},
    create: {
      userId: 'auth-user-2', // ID fict√≠cio do Supabase auth
      email: 'maria.santos@livraria.com',
      name: 'Maria Santos',
      phone: '(11) 88888-2222',
      avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face',
      bio: 'Propriet√°ria da Livraria Santos h√° 15 anos. Especializada em livros t√©cnicos e acad√™micos.',
      accountType: 'BOOKSTORE'
    }
  });

  // Usu√°rio 3: Pedro Costa (Sebo)
  const pedro = await prisma.profile.upsert({
    where: { email: 'pedro.costa@sebo.com' },
    update: {},
    create: {
      userId: 'auth-user-3', // ID fict√≠cio do Supabase auth
      email: 'pedro.costa@sebo.com',
      name: 'Pedro Costa',
      phone: '(11) 77777-3333',
      avatar: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=150&h=150&fit=crop&crop=face',
      bio: 'Propriet√°rio do Sebo Costa. Especializado em livros raros, usados e edi√ß√µes antigas.',
      accountType: 'SECONDHAND_STORE'
    }
  });

  console.log(`‚úÖ ${3} usu√°rios criados`);

  // Criar alguns livros de exemplo
  console.log('üìñ Criando livros de exemplo...');

  const books = await Promise.all([
    prisma.book.upsert({
      where: { isbn: '9788535902775' },
      update: {},
      create: {
        title: 'O Senhor dos An√©is',
        author: 'J.R.R. Tolkien',
        isbn: '9788535902775',
        publisher: 'Martins Fontes',
        publishedAt: new Date('2000-01-01'),
        pages: 1216,
        language: 'Portugu√™s',
        description: 'Uma das maiores obras de fantasia da literatura mundial.',
        categoryId: categories.find(c => c.name === 'Fic√ß√£o')?.id || categories[0].id
      }
    }),
    prisma.book.upsert({
      where: { isbn: '9788573025639' },
      update: {},
      create: {
        title: 'Clean Code',
        author: 'Robert C. Martin',
        isbn: '9788573025639',
        publisher: 'Alta Books',
        publishedAt: new Date('2009-01-01'),
        pages: 425,
        language: 'Portugu√™s',
        description: 'Um guia para escrever c√≥digo limpo e leg√≠vel.',
        categoryId: categories.find(c => c.name === 'Tecnologia')?.id || categories[0].id
      }
    }),
    prisma.book.upsert({
      where: { isbn: '9788535909552' },
      update: {},
      create: {
        title: '1984',
        author: 'George Orwell',
        isbn: '9788535909552',
        publisher: 'Companhia das Letras',
        publishedAt: new Date('2009-01-01'),
        pages: 416,
        language: 'Portugu√™s',
        description: 'Um cl√°ssico da literatura dist√≥pica.',
        categoryId: categories.find(c => c.name === 'Fic√ß√£o')?.id || categories[0].id
      }
    })
  ]);

  console.log(`‚úÖ ${books.length} livros criados`);

  // Criar algumas localiza√ß√µes de exemplo
  console.log('üìç Criando localiza√ß√µes de exemplo...');

  const locations = await Promise.all([
    prisma.location.create({
      data: {
        name: 'Metr√¥ Trianon-Masp',
        address: 'Av. Paulista, 900 - Bela Vista, S√£o Paulo - SP',
        city: 'S√£o Paulo',
        state: 'SP',
        zipCode: '01310-100',
        latitude: -23.5631,
        longitude: -46.6544,
        notes: 'Ponto de encontro no metr√¥, pr√≥ximo ao MASP'
      }
    }),
    prisma.location.create({
      data: {
        name: 'Livraria Santos',
        address: 'Rua das Flores, 123 - Centro, S√£o Paulo - SP',
        city: 'S√£o Paulo',
        state: 'SP',
        zipCode: '01001-000',
        latitude: -23.5505,
        longitude: -46.6333,
        notes: 'Livraria no centro da cidade'
      }
    }),
    prisma.location.create({
      data: {
        name: 'Sebo Costa',
        address: 'Rua Harmonia, 456 - Vila Madalena, S√£o Paulo - SP',
        city: 'S√£o Paulo',
        state: 'SP',
        zipCode: '05435-000',
        latitude: -23.5671,
        longitude: -46.6919,
        notes: 'Sebo especializado em livros raros'
      }
    })
  ]);

  console.log(`‚úÖ ${locations.length} localiza√ß√µes criadas`);

  // Criar algumas listagens de exemplo
  console.log('üè∑Ô∏è Criando listagens de exemplo...');

  const listings = await Promise.all([
    // Jo√£o vende um livro
    prisma.listing.create({
      data: {
        condition: 'LIKE_NEW',
        price: 45.00,
        transactionType: 'SALE',
        status: 'ACTIVE',
        profileId: joao.id,
        bookId: books.find(b => b.title.includes('Senhor dos An√©is'))?.id || books[0].id,
        locationId: locations[0].id
      }
    }),

    // Maria (livraria) vende um livro t√©cnico
    prisma.listing.create({
      data: {
        condition: 'NEW',
        price: 89.90,
        transactionType: 'SALE',
        status: 'ACTIVE',
        profileId: maria.id,
        bookId: books.find(b => b.title.includes('Clean Code'))?.id || books[0].id,
        locationId: locations[1].id
      }
    }),

    // Pedro (sebo) troca um livro
    prisma.listing.create({
      data: {
        condition: 'GOOD',
        price: 0.00,
        transactionType: 'EXCHANGE',
        status: 'ACTIVE',
        profileId: pedro.id,
        bookId: books.find(b => b.title.includes('1984'))?.id || books[0].id,
        locationId: locations[2].id
      }
    })
  ]);

  console.log(`‚úÖ ${listings.length} listagens criadas`);

  // Criar algumas reviews de exemplo
  console.log('‚≠ê Criando reviews de exemplo...');

  const reviews = await Promise.all([
    prisma.review.create({
      data: {
        rating: 5,
        comment: 'Excelente atendimento! O livro chegou em perfeito estado.',
        profileId: joao.id,
        listingId: listings[1].id // Review da livraria da Maria
      }
    }),
    prisma.review.create({
      data: {
        rating: 4,
        comment: 'Sebo muito organizado, encontrei livros raros que procurava h√° tempo.',
        profileId: maria.id,
        listingId: listings[2].id // Review do sebo do Pedro
      }
    })
  ]);

  console.log(`‚úÖ ${reviews.length} reviews criadas`);

  // Criar algumas amizades de exemplo
  console.log('ü§ù Criando amizades de exemplo...');

  const friendships = await Promise.all([
    // Jo√£o e Maria s√£o amigos
    prisma.friendship.create({
      data: {
        profileId: joao.id,
        friendId: maria.id
      }
    }),
    // Jo√£o e Pedro s√£o amigos
    prisma.friendship.create({
      data: {
        profileId: joao.id,
        friendId: pedro.id
      }
    })
  ]);

  console.log(`‚úÖ ${friendships.length} amizades criadas`);

  // Criar alguns favoritos de exemplo
  console.log('‚ù§Ô∏è Criando favoritos de exemplo...');

  const favorites = await Promise.all([
    prisma.favorite.create({
      data: {
        profileId: joao.id,
        listingId: listings[1].id // Jo√£o favorita o livro da livraria
      }
    }),
    prisma.favorite.create({
      data: {
        profileId: maria.id,
        listingId: listings[2].id // Maria favorita o livro do sebo
      }
    })
  ]);

  console.log(`‚úÖ ${favorites.length} favoritos criados`);

  console.log('üéâ Seed conclu√≠do com sucesso!');
  console.log('\nüìä Resumo dos dados criados:');
  console.log(`   ‚Ä¢ ${categories.length} categorias`);
  console.log(`   ‚Ä¢ ${3} usu√°rios de teste`);
  console.log(`   ‚Ä¢ ${books.length} livros`);
  console.log(`   ‚Ä¢ ${listings.length} listagens`);
  console.log(`   ‚Ä¢ ${reviews.length} reviews`);
  console.log(`   ‚Ä¢ ${friendships.length} amizades`);
  console.log(`   ‚Ä¢ ${favorites.length} favoritos`);
  
  console.log('\nüë• Usu√°rios de teste criados:');
  console.log(`   ‚Ä¢ Jo√£o Silva (${joao.email}) - Usu√°rio comum`);
  console.log(`   ‚Ä¢ Maria Santos (${maria.email}) - Livraria`);
  console.log(`   ‚Ä¢ Pedro Costa (${pedro.email}) - Sebo`);
}

main()
  .catch((e) => {
    console.error('‚ùå Erro durante o seed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
